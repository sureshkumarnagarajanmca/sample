{
    "root": {
        "doc": "root directory of app",
        "format": "path",
        "default": "/"
    },

    "configfile": {
        "doc": "path to config file",
        "format": "path",
        "default": "config/client.json",
        "arg": "config"
    },

    "hostname": {
        "doc": "hostname for server",
        "default": "localhost",
        "env": "client_HOSTNAME",
        "arg": "hostname"
    },

    "serviceName": {
        "doc": "name of service",
        "default": "clientServer",
        "env": "client_SERVICE",
        "arg": "serviceName"
    },

    "service": {
        "doc": "set dynamically as a combination of serviceName and commit",
        "default": "clientServer/000000"
    },

    "port": {
        "doc": "port for server",
        "format": "int",
        "default": 3004,
        "env": "client_PORT",
        "arg": "port"
    },

    "protocol": {
        "doc": "http or https",
        "format": ["http", "https"],
        "default": "http",
        "env": "client_PROTOCOL"
    },

    "host": {
        "doc": "host headers etc",
        "default": "http://localhost"
    },

    "baseURL": {
        "doc": "base url for client",
        "format": "url",
        "default": "http://localhost/"
    },

    "commit": {
        "doc": "sha of commit that is running",
        "default": "000000",
        "env": "client_COMMITSHA"
    },

    "seedData": {
        "doc": "create master database",
        "default": false,
        "arg": "d"
    },

    "debug": {
        "doc": "set debug",
        "default": "",
        "env": "DEBUG",
        "arg": "debug"
    },

    "debugport": {
        "doc": "debugging port",
        "default": 5673,
        "arg": "debugport"
    },

    "memoryusage": {
        "doc": "log memory usage",
        "default": 0,
        "arg": "m"
    },

    "environment": {
        "doc": "server environment",
        "format": ["development", "production", "test","amazon"],
        "default": "development",
        "env": "NODE_ENV"
    },

    //currently used for batch middleware
    "timeout": {
        "doc": "maximum time any operation should take",
        "format": "int",
        "default": 30000
    },

    //workerCount
    //  0 => the number of cpus available
    //  but if windows then no clustering
    "workerCount": {
        "doc": "number of workers to start",
        "format": "int",
        "arg": "workers",
        "default": 0
    },

    "noCluster": {
        "doc": "disable clustering",
        "arg": "no-cluster",
        "env": "NO_CLUSTER",
        "default": false
    },

    "ttlOnError": {
        "doc": "time to live for the server after unhandled error",
        "format": "int",
        "default": 5000
    },

    "trust_proxy": {
        "doc": "list of ip address / subnet of proxies to trust",
        "default": "loopback"
    },

    "cors": {
        "doc": "enable CORS request to allow requests from Desktop web client",
        "default": "*",
        "env": "client_CORS",
        "arg": "cors"
    },

    "processJobs": {
        "doc": "If true this server will also process the job queues",
        "default": false
    },

    "requiredVersion": {
        "doc": "If requiredVersion is equal to db's current version, then only start application",
        "default": 101
    },

    "APPLICATIONID": {
        "doc": "uuid for server",
        "default": "fad-123456"
    }/*,

    "pepMiddleware":{
        "doc":"If PEP middleware is enabled",
        "default":true
    }*/

}
